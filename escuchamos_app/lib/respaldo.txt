// Importaciones necesarias
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:async';

// Definición de colores y estilos de texto
const Color primaryColor = Color.fromRGBO(164, 173, 218, 1.0);
const Color accentColor = Colors.deepPurpleAccent;

const TextStyle titleStyle = TextStyle(
  color: primaryColor,
  fontWeight: FontWeight.bold,
  fontSize: 24.0,
);

const TextStyle subtitleStyle = TextStyle(
  color: Colors.grey,
  fontSize: 16.0,
);

const TextStyle inputTextStyle = TextStyle(
  fontSize: 16.0,
);

// Definición de espacios
const EdgeInsets formPadding = EdgeInsets.symmetric(horizontal: 20.0, vertical: 10.0);
const EdgeInsets formFieldPadding = EdgeInsets.symmetric(vertical: 5.0);

// Duración para el temporizador
const Duration loginTime = Duration(milliseconds: 2250);

void main() {
  runApp(MyApp());
}

// Clase principal de la aplicación
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Login App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: LoginPage(),
    );
  }
}

// Página de inicio de sesión
class LoginPage extends StatefulWidget {
  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  // Controladores para los campos de texto
  TextEditingController _usernameController = TextEditingController();
  TextEditingController _passwordController = TextEditingController();
  
  // Variable para almacenar mensaje de error
  String _errorMessage = '';

  // Temporizador para limpiar el mensaje de error después de un tiempo
  late Timer _timer;

  bool _obscureText = true; // Estado inicial del texto oculto

  @override
  void dispose() {
    _timer.cancel(); 
    super.dispose();
  }

  // Función para manejar el inicio de sesión
  Future<void> _login() async {
    // Verificar si los campos están vacíos antes de intentar el inicio de sesión
    if (_usernameController.text.isEmpty || _passwordController.text.isEmpty) {
      setState(() {
        _errorMessage = 'Por favor complete todos los campos';
      });
      // Iniciar un temporizador para limpiar el mensaje de error después de 4 segundos
      _timer = Timer(Duration(seconds: 4), () {
        setState(() {
          _errorMessage = ''; 
        });
      });
      return;
    }

    final response = await http.post(
      Uri.parse('http://127.0.0.1:8000/login/'),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, String>{
        'username': _usernameController.text,
        'password': _passwordController.text,
      }),
    );

    // Verificar el estado de la respuesta
    if (response.statusCode == 200) {
      // Si el inicio de sesión es exitoso, navegar a la página de bienvenida
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => WelcomePage(username: _usernameController.text),
        ),
      );
    } else if (response.statusCode == 400) {
      // Si hay un error de inicio de sesión, mostrar mensaje de error y limpiar después de un tiempo
      final jsonResponse = json.decode(utf8.decode(response.bodyBytes));
      final detail = jsonResponse['detail'];
      setState(() {
        _errorMessage = detail != null ? detail.toString() : 'Usuario o contraseña incorrectos';
        _timer = Timer(Duration(seconds: 4), () {
          setState(() {
            _errorMessage = ''; 
          });
        });
      });
    } 
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Login', style: titleStyle),
      ),
      body: Padding(
        padding: formPadding,
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: _usernameController,
              decoration: InputDecoration(
                labelText: 'Usuario',
                labelStyle: subtitleStyle,
              ),
              style: inputTextStyle,
            ),
            SizedBox(height: 10),
            TextFormField(
              controller: _passwordController,
              decoration: InputDecoration(
                labelText: 'Contraseña',
                labelStyle: subtitleStyle,
                suffixIcon: IconButton(
                  icon: Icon(_obscureText ? Icons.visibility : Icons.visibility_off),
                  onPressed: () {
                    setState(() {
                      _obscureText = !_obscureText;
                    });
                  },
                ),
              ),
              obscureText: _obscureText, // Ocultar texto según el estado
              style: inputTextStyle,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _login,
              style: ElevatedButton.styleFrom(
                backgroundColor: primaryColor,
              ),
              child: Text(
                'Login',
                style: TextStyle(
                  color: Colors.white, // Color del texto blanco
                  fontSize: 16.0,
                ),
              ),
            ),
            SizedBox(height: 10),
            Text(
              _errorMessage,
              style: TextStyle(color: Colors.red),
            ),
            SizedBox(height: 10),
            TextButton(
              onPressed: () {
                // Navegar a la página de registro
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => RegisterPage(),
                  ),
                );
              },
              child: Text('Registrar', style: inputTextStyle),
            ),
          ],
        ),
      ),
    );
  }
}






// Página de registro
class RegisterPage extends StatefulWidget {
  @override
  _RegisterPageState createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  final TextEditingController usernameController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  final TextEditingController confirmPasswordController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController nameController = TextEditingController();
  final TextEditingController lastNameController = TextEditingController();
  final TextEditingController addressController = TextEditingController();
  final TextEditingController phoneNumberController = TextEditingController();

  bool _obscureText = true;
  bool _obscureConfirmText = true;
  String? _usernameError;
  String? _passwordError;
  String? _confirmPasswordError;
  String? _emailError;
  String? _nameError;
  String? _lastNameError;
  String? _addressError;
  String? _phoneNumberError;

  Future<void> _registerUser(BuildContext context) async {
    setState(() {
      _usernameError = _validateField(usernameController.text);
      _passwordError = _validateField(passwordController.text);
      _confirmPasswordError = _validateField(confirmPasswordController.text);
      _emailError = _validateField(emailController.text);
      _nameError = _validateField(nameController.text);
      _lastNameError = _validateField(lastNameController.text);
      _addressError = _validateField(addressController.text);
      _phoneNumberError = _validateField(phoneNumberController.text);
    });

    if (_usernameError != null ||
        _passwordError != null ||
        _confirmPasswordError != null ||
        _emailError != null ||
        _nameError != null ||
        _lastNameError != null ||
        _addressError != null ||
        _phoneNumberError != null) {
      // Si hay errores, no realizar el registro
      return;
    }

    // Verificar si las contraseñas coinciden
    if (passwordController.text != confirmPasswordController.text) {
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Text('Error'),
            content: Text('Las contraseñas no coinciden.'),
            actions: <Widget>[
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: Text('Cerrar'),
              ),
            ],
          );
        },
      );
      return;
    }

    final url = Uri.parse('http://127.0.0.1:8000/register/');
    final response = await http.post(
      url,
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, dynamic>{
        'username': usernameController.text,
        'password': passwordController.text,
        'email': emailController.text,
        'name': nameController.text,
        'last_name': lastNameController.text,
        'address': addressController.text,
        'phone_number': phoneNumberController.text,
      }),
    );

    if (response.statusCode == 200) {
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Text('Usuario registrado correctamente'),
            actions: <Widget>[
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: Text('Cerrar'),
              ),
            ],
          );
        },
      );
    } else {
      final Map<String, dynamic> responseData = json.decode(utf8.decode(response.bodyBytes));
      final errorMessage = responseData.values.join('\n');
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Text('Error al registrar usuario'),
            content: Text(errorMessage),
            actions: <Widget>[
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: Text('Cerrar'),
              ),
            ],
          );
        },
      );
    }
  }

  String? _validateField(String value) {
    if (value.isEmpty) {
      return 'Este campo es obligatorio';
    }
    return null;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Registrar'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: ListView(
          children: [
            TextFormField(
              controller: usernameController,
              decoration: InputDecoration(
                labelText: 'Nombre de usuario',
                errorText: _usernameError,
              ),
            ),
            TextFormField(
              controller: passwordController,
              decoration: InputDecoration(
                labelText: 'Contraseña',
                suffixIcon: IconButton(
                  icon: Icon(_obscureText ? Icons.visibility : Icons.visibility_off),
                  onPressed: () {
                    setState(() {
                      _obscureText = !_obscureText;
                    });
                  },
                ),
                errorText: _passwordError,
              ),
              obscureText: _obscureText,
            ),
            TextFormField(
              controller: confirmPasswordController,
              decoration: InputDecoration(
                labelText: 'Confirmar Contraseña',
                errorText: _confirmPasswordError,
              ),
              obscureText: _obscureConfirmText,
              onChanged: (value) {
                setState(() {
                  _obscureConfirmText = !_obscureConfirmText;
                });
              },
            ),
            TextFormField(
              controller: emailController,
              decoration: InputDecoration(
                labelText: 'Correo electrónico',
                errorText: _emailError,
              ),
              keyboardType: TextInputType.emailAddress,
            ),
            TextFormField(
              controller: nameController,
              decoration: InputDecoration(
                labelText: 'Nombre',
                errorText: _nameError,
              ),
            ),
            TextFormField(
              controller: lastNameController,
              decoration: InputDecoration(
                labelText: 'Apellido',
                errorText: _lastNameError,
              ),
            ),
            TextFormField(
              controller: addressController,
              decoration: InputDecoration(
                labelText: 'Dirección',
                errorText: _addressError,
              ),
            ),
            TextFormField(
              controller: phoneNumberController,
              decoration: InputDecoration(
                labelText: 'Número de teléfono',
                errorText: _phoneNumberError,
              ),
              keyboardType: TextInputType.phone,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                _registerUser(context);
                Future.delayed(Duration(seconds: 4), () {
                  setState(() {
                    _usernameError = null;
                    _passwordError = null;
                    _confirmPasswordError = null;
                    _emailError = null;
                    _nameError = null;
                    _lastNameError = null;
                    _addressError = null;
                    _phoneNumberError = null;
                  });
                });
              },
              child: Text('Registrar'),
            ),
          ],
        ),
      ),
    );
  }
}




// Página de bienvenida
class WelcomePage extends StatelessWidget {
  final String username;

  WelcomePage({required this.username});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Welcome'),
      ),
      body: Center(
        child: Text('Bienvenido $username'),
      ),
    );
  }
}















import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:async';
import 'login_page.dart'; // Importa RegisterPage si está en otro archivo

class RegisterPage extends StatefulWidget {
  @override
  _RegisterPageState createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  final TextEditingController usernameController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  final TextEditingController confirmPasswordController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController nameController = TextEditingController();
  final TextEditingController lastNameController = TextEditingController();
  final TextEditingController addressController = TextEditingController();
  final TextEditingController phoneNumberController = TextEditingController();

  bool _obscureText = true;
  bool _obscureConfirmText = true;

  String? _usernameError;
  String? _passwordError;
  String? _confirmPasswordError;
  String? _emailError;
  String? _nameError;
  String? _lastNameError;
  String? _addressError;
  String? _phoneNumberError;

  Future<void> _registerUser(BuildContext context) async {
    setState(() {
      _usernameError = _validateField(usernameController.text);
      _passwordError = _validateField(passwordController.text);
      _confirmPasswordError = _validateField(confirmPasswordController.text);
      _emailError = _validateField(emailController.text);
      _nameError = _validateField(nameController.text);
      _lastNameError = _validateField(lastNameController.text);
      _addressError = _validateField(addressController.text);
      _phoneNumberError = _validateField(phoneNumberController.text);
    });

    if (_usernameError != null ||
        _passwordError != null ||
        _confirmPasswordError != null ||
        _emailError != null ||
        _nameError != null ||
        _lastNameError != null ||
        _addressError != null ||
        _phoneNumberError != null) {
      return;
    }

    if (passwordController.text != confirmPasswordController.text) {
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Text('Error'),
            content: Text('Las contraseñas no coinciden.'),
            actions: <Widget>[
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: Text('Cerrar'),
              ),
            ],
          );
        },
      );
      return;
    }

    final url = Uri.parse('http://127.0.0.1:8000/register/');
    final response = await http.post(
      url,
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, dynamic>{
        'username': usernameController.text,
        'password': passwordController.text,
        'email': emailController.text,
        'name': nameController.text,
        'last_name': lastNameController.text,
        'address': addressController.text,
        'phone_number': phoneNumberController.text,
      }),
    );

    if (response.statusCode == 200) {
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Text('Usuario registrado correctamente'),
            actions: <Widget>[
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: Text('Cerrar'),
              ),
            ],
          );
        },
      );
    } else {
      final Map<String, dynamic> responseData = json.decode(utf8.decode(response.bodyBytes));
      final errorMessage = responseData.values.join('\n');
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Text('Error al registrar usuario'),
            content: Text(errorMessage),
            actions: <Widget>[
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: Text('Cerrar'),
              ),
            ],
          );
        },
      );
    }
  }

  String? _validateField(String value) {
    if (value.isEmpty) {
      return 'Este campo es obligatorio';
    }
    return null;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: ListView(
          children: [
            TextFormField(
              controller: usernameController,
              decoration: InputDecoration(
                labelText: 'Nombre de usuario',
                border: OutlineInputBorder(),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Color.fromRGBO(22, 45, 222, 1)), // Cambio: Agregado el color azul al borde enfocado
                ),
                errorText: _usernameError,
              ),
            ),
            SizedBox(height: 10),
            TextFormField(
              controller: passwordController,
              decoration: InputDecoration(
                labelText: 'Contraseña',
                border: OutlineInputBorder(),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Color.fromRGBO(22, 45, 222, 1)), // Cambio: Agregado el color azul al borde enfocado
                ),
                suffixIcon: IconButton(
                  icon: Icon(_obscureText ? Icons.visibility_off : Icons.visibility),
                  onPressed: () {
                    setState(() {
                      _obscureText = !_obscureText;
                    });
                  },
                ),
                errorText: _passwordError,
              ),
              obscureText: _obscureText,
            ),
            SizedBox(height: 10),
            TextFormField(
              controller: confirmPasswordController,
              decoration: InputDecoration(
                labelText: 'Confirmar Contraseña',
                border: OutlineInputBorder(),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Color.fromRGBO(22, 45, 222, 1)), // Cambio: Agregado el color azul al borde enfocado
                ),
                errorText: _confirmPasswordError,
              ),
              obscureText: _obscureConfirmText,
              onChanged: (value) {
                setState(() {
                  _obscureConfirmText = !_obscureConfirmText;
                });
              },
            ),
            SizedBox(height: 10),
            TextFormField(
              controller: emailController,
              decoration: InputDecoration(
                labelText: 'Correo electrónico',
                border: OutlineInputBorder(),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Color.fromRGBO(22, 45, 222, 1)), // Cambio: Agregado el color azul al borde enfocado
                ),
                errorText: _emailError,
              ),
              keyboardType: TextInputType.emailAddress,
            ),
            SizedBox(height: 10),
            TextFormField(
              controller: nameController,
              decoration: InputDecoration(
                labelText: 'Nombres',
                border: OutlineInputBorder(),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Color.fromRGBO(22, 45, 222, 1)), // Cambio: Agregado el color azul al borde enfocado
                ),
                errorText: _nameError,
              ),
            ),
            SizedBox(height: 10),
            TextFormField(
              controller: lastNameController,
              decoration: InputDecoration(
                labelText: 'Apellidos',
                border: OutlineInputBorder(),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Color.fromRGBO(22, 45, 222, 1)), // Cambio: Agregado el color azul al borde enfocado
                ),
                errorText: _lastNameError,
              ),
            ),
            SizedBox(height: 10),
            TextFormField(
              controller: addressController,
              decoration: InputDecoration(
                labelText: 'Dirección',
                border: OutlineInputBorder(),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Color.fromRGBO(22, 45, 222, 1)), // Cambio: Agregado el color azul al borde enfocado
                ),
                errorText: _addressError,
              ),
            ),
            SizedBox(height: 10),
            TextFormField(
              controller: phoneNumberController,
              decoration: InputDecoration(
                labelText: 'Número de teléfono',
                border: OutlineInputBorder(),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Color.fromRGBO(22, 45, 222, 1)), // Cambio: Agregado el color azul al borde enfocado
                ),
                errorText: _phoneNumberError,
              ),
              keyboardType: TextInputType.phone,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                _registerUser(context);
                Future.delayed(Duration(seconds: 3), () { //segundo del mensaje de campo vacio al presionar registrar
                  setState(() {
                    _usernameError = null;
                    _passwordError = null;
                    _confirmPasswordError = null;
                    _emailError = null;
                    _nameError = null;
                    _lastNameError = null;
                    _addressError = null;
                    _phoneNumberError = null;
                  });
                });
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Color.fromRGBO(22, 45, 222, 1), // Define el color de fondo directamente aquí
                padding: EdgeInsets.symmetric(vertical: 16.0),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8.0),
                ),
              ),
              child: Text(
                'Registrarse',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 16.0,
                ),
              ),
            ),
            SizedBox(height: 20),
            TextButton( // Cambio: Se agrega el TextButton al final del formulario
              onPressed: () {
                Navigator.push(
                  context,
                  PageRouteBuilder(
                    pageBuilder: (context, animation, secondaryAnimation) => LoginPage(), // Cambio: Se cambia la clase a la que redirige
                    transitionsBuilder: (context, animation, secondaryAnimation, child) {
                      var begin = Offset(-1.0, 0.0); // Cambio: Se cambia el inicio de la transición a la izquierda (-1.0)
                      var end = Offset.zero;
                      var curve = Curves.easeInOut;
                      var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));
                      var offsetAnimation = animation.drive(tween);
                      return SlideTransition(
                        position: offsetAnimation,
                        child: child,
                      );
                    },
                  ),
                );
              },
              child: Text(
                '¿Ya tienes una cuenta? Inicia sesión',
                style: TextStyle(
                  fontSize: 14.0,
                  color: Color.fromRGBO(22, 45, 222, 1),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}















import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class ProfilePage extends StatefulWidget {
  final String token;
  final String userId;

  ProfilePage({required this.token, required this.userId});

  @override
  _ProfilePageState createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  late String _username = '';
  late String _email = '';
  late String _name = '';
  late String _lastName = '';
  late String _address = '';
  late String _phoneNumber = '';

  @override
  void initState() {
    super.initState();
    _fetchUserData();
  }

  Future<void> _fetchUserData() async {
    try {
      final response = await http.get(
        Uri.parse('http://127.0.0.1:8000/user/${widget.userId}'),
        headers: <String, String>{
          'Authorization': 'Bearer ${widget.token}',
        },
      );

      if (response.statusCode == 200) {
        final userData = json.decode(response.body);

        setState(() {
          _username = userData['username'];
          _email = userData['email'];
          _name = userData['name'];
          _lastName = userData['last_name'];
          _address = userData['address'];
          _phoneNumber = userData['phone_number'];
        });
      } else {
        throw Exception('Failed to load user data');
      }
    } catch (error) {
      print('Error fetching user data: $error');
      // Manejo de errores
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        title: SizedBox.shrink(),
        actions: [
          PopupMenuButton(
            itemBuilder: (context) => [
              PopupMenuItem(
                child: ListTile(
                  leading: Icon(
                    Icons.lock,
                    color: Color.fromRGBO(22, 45, 222, 1),
                  ),
                  title: Text(
                    'Cambiar contraseña',
                    style: TextStyle(color: Color.fromRGBO(22, 45, 222, 1)),
                  ),
                  onTap: () {
                    Navigator.pop(context);
                  },
                ),
              ),
              PopupMenuItem(
                child: ListTile(
                  leading: Icon(
                    Icons.edit,
                    color: Color.fromRGBO(22, 45, 222, 1),
                  ),
                  title: Text(
                    'Actualizar información',
                    style: TextStyle(color: Color.fromRGBO(22, 45, 222, 1)),
                  ),
                  onTap: () {
                    Navigator.pop(context);
                  },
                ),
              ),
              PopupMenuItem(
                child: ListTile(
                  leading: Icon(
                    Icons.logout,
                    color: Color.fromRGBO(22, 45, 222, 1),
                  ),
                  title: Text(
                    'Cerrar sesión',
                    style: TextStyle(color: Color.fromRGBO(22, 45, 222, 1)),
                  ),
                  onTap: () {
                    Navigator.pop(context);
                  },
                ),
              ),
            ],
            icon: Icon(
              Icons.more_vert,
              color: Color.fromRGBO(22, 45, 222, 1),
            ),
            tooltip: 'setting',
          ),
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            SizedBox(height: 5),
            _buildUserInfo(),
            SizedBox(height: 20),
          ],
        ),
      ),
    );
  }

  Widget _buildUserInfo() {
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: 16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          CircleAvatar(
            radius: 50,
            backgroundImage: NetworkImage('https://via.placeholder.com/150'),
          ),
          SizedBox(height: 20),
          Text(
            'Nombre de usuario: $_username',
            style: TextStyle(fontSize: 18),
          ),
          SizedBox(height: 10),
          Text(
            'Correo electrónico: $_email',
            style: TextStyle(fontSize: 18),
          ),
          SizedBox(height: 10),
          Text(
            'Nombres: $_name',
            style: TextStyle(fontSize: 18),
          ),
          SizedBox(height: 10),
          Text(
            'Apellidos: $_lastName',
            style: TextStyle(fontSize: 18),
          ),
          SizedBox(height: 10),
          Text(
            'Dirección: $_address',
            style: TextStyle(fontSize: 18),
          ),
          SizedBox(height: 10),
          Text(
            'Número telefónico: $_phoneNumber',
            style: TextStyle(fontSize: 18),
          ),
        ],
      ),
    );
  }
}










import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:async';
import 'login_page.dart'; // Importa RegisterPage si está en otro archivo

class RegisterPage extends StatefulWidget {
  @override
  _RegisterPageState createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  final TextEditingController usernameController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  final TextEditingController confirmPasswordController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController nameController = TextEditingController();
  final TextEditingController lastNameController = TextEditingController();
  final TextEditingController addressController = TextEditingController();
  final TextEditingController phoneNumberController = TextEditingController();

  bool _obscureText = true;
  bool _obscureConfirmText = true;

  String? _usernameError;
  String? _passwordError;
  String? _confirmPasswordError;
  String? _emailError;
  String? _nameError;
  String? _lastNameError;
  String? _addressError;
  String? _phoneNumberError;

  Timer? _errorMessageTimer; // Timer para controlar la duración del mensaje de error

  @override
  void dispose() {
    _errorMessageTimer?.cancel(); // Cancela el temporizador cuando se dispose el widget
    super.dispose();
  }

  Future<void> _registerUser(BuildContext context) async {
    setState(() {
      _usernameError = _validateField(usernameController.text);
      _passwordError = _validateField(passwordController.text);
      _confirmPasswordError = _validateField(confirmPasswordController.text);
      _emailError = _validateField(emailController.text);
      _nameError = _validateField(nameController.text);
      _lastNameError = _validateField(lastNameController.text);
      _addressError = _validateField(addressController.text);
      _phoneNumberError = _validateField(phoneNumberController.text);
    });

    if (_usernameError != null ||
        _passwordError != null ||
        _confirmPasswordError != null ||
        _emailError != null ||
        _nameError != null ||
        _lastNameError != null ||
        _addressError != null ||
        _phoneNumberError != null) {
      return;
    }

    if (passwordController.text != confirmPasswordController.text) {
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Text('Error'),
            content: Text('Las contraseñas no coinciden.'),
            actions: <Widget>[
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: Text('Cerrar'),
              ),
            ],
          );
        },
      );
      return;
    }

    final url = Uri.parse('http://127.0.0.1:8000/register/');
    final response = await http.post(
      url,
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
      },
      body: jsonEncode(<String, dynamic>{
        'username': usernameController.text,
        'password': passwordController.text,
        'email': emailController.text,
        'name': nameController.text,
        'last_name': lastNameController.text,
        'address': addressController.text,
        'phone_number': phoneNumberController.text,
      }),
    );

    if (response.statusCode == 201) {
      final responseData = json.decode(response.body);
      final message = responseData['message'];

      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            content: Text(message),
            actions: <Widget>[
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  Navigator.push(
                    context,
                    PageRouteBuilder(
                      pageBuilder: (context, animation, secondaryAnimation) => LoginPage(), // Navega a la página de inicio de sesión
                      transitionsBuilder: (context, animation, secondaryAnimation, child) {
                        var begin = Offset(-1.0, 0.0); // Cambio: Se cambia el inicio de la transición a la izquierda (-1.0)
                        var end = Offset.zero;
                        var curve = Curves.easeInOut;
                        var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));
                        var offsetAnimation = animation.drive(tween);
                        return SlideTransition(
                          position: offsetAnimation,
                          child: child,
                        );
                      },
                    ),
                  );
                },
                child: Text('Cerrar'),
              ),
            ],
          );
        },
      );
    } else {
      final responseData = json.decode(utf8.decode(response.bodyBytes));
      final errorMessage = responseData.values.join('\n');
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            content: Text(errorMessage),
            actions: <Widget>[
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: Text('Cerrar'),
              ),
            ],
          );
        },
      );
    }
  }

  String? _validateField(String value) {
    if (value.isEmpty) {
      // Si el valor está vacío, muestra el mensaje de error y comienza el temporizador
      _startErrorMessageTimer();
      return 'Este campo es obligatorio';
    }
    // Si el valor no está vacío, cancela el temporizador
    _cancelErrorMessageTimer();
    return null;
  }

  // Método para iniciar el temporizador para el mensaje de error
  void _startErrorMessageTimer() {
    _errorMessageTimer = Timer(Duration(seconds: 4), () {
      setState(() {
        // Limpia los mensajes de error después de 4 segundos
        _usernameError = null;
        _passwordError = null;
        _confirmPasswordError = null;
        _emailError = null;
        _nameError = null;
        _lastNameError = null;
        _addressError = null;
        _phoneNumberError = null;
      });
    });
  }

  // Método para cancelar el temporizador para el mensaje de error
  void _cancelErrorMessageTimer() {
    _errorMessageTimer?.cancel();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: ListView(
          children: [
            TextFormField(
              controller: usernameController,
              decoration: InputDecoration(
                labelText: 'Nombre de usuario',
                border: OutlineInputBorder(),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Color.fromRGBO(22, 45, 222, 1)), // Cambio: Agregado el color azul al borde enfocado
                ),
                errorText: _usernameError,
              ),
            ),
            SizedBox(height: 10),
            TextFormField(
              controller: passwordController,
              decoration: InputDecoration(
                labelText: 'Contraseña',
                border: OutlineInputBorder(),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Color.fromRGBO(22, 45, 222, 1)), // Cambio: Agregado el color azul al borde enfocado
                ),
                suffixIcon: IconButton(
                  icon: Icon(_obscureText ? Icons.visibility_off : Icons.visibility),
                  onPressed: () {
                    setState(() {
                      _obscureText = !_obscureText;
                    });
                  },
                ),
                errorText: _passwordError,
              ),
              obscureText: _obscureText,
            ),
            SizedBox(height: 10),
            TextFormField(
              controller: confirmPasswordController,
              decoration: InputDecoration(
                labelText: 'Confirmar Contraseña',
                border: OutlineInputBorder(),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Color.fromRGBO(22, 45, 222, 1)), // Cambio: Agregado el color azul al borde enfocado
                ),
                errorText: _confirmPasswordError,
              ),
              obscureText: _obscureConfirmText,
              onChanged: (value) {
                setState(() {
                  _obscureConfirmText = !_obscureConfirmText;
                });
              },
            ),
            SizedBox(height: 10),
            TextFormField(
              controller: emailController,
              decoration: InputDecoration(
                labelText: 'Correo electrónico',
                border: OutlineInputBorder(),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Color.fromRGBO(22, 45, 222, 1)), // Cambio: Agregado el color azul al borde enfocado
                ),
                errorText: _emailError,
              ),
              keyboardType: TextInputType.emailAddress,
            ),
            SizedBox(height: 10),
            TextFormField(
              controller: nameController,
              decoration: InputDecoration(
                labelText: 'Nombres',
                border: OutlineInputBorder(),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Color.fromRGBO(22, 45, 222, 1)), // Cambio: Agregado el color azul al borde enfocado
                ),
                errorText: _nameError,
              ),
            ),
            SizedBox(height: 10),
            TextFormField(
              controller: lastNameController,
              decoration: InputDecoration(
                labelText: 'Apellidos',
                border: OutlineInputBorder(),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Color.fromRGBO(22, 45, 222, 1)), // Cambio: Agregado el color azul al borde enfocado
                ),
                errorText: _lastNameError,
              ),
            ),
            SizedBox(height: 10),
            TextFormField(
              controller: addressController,
              decoration: InputDecoration(
                labelText: 'Dirección',
                border: OutlineInputBorder(),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Color.fromRGBO(22, 45, 222, 1)), // Cambio: Agregado el color azul al borde enfocado
                ),
                errorText: _addressError,
              ),
            ),
            SizedBox(height: 10),
            TextFormField(
              controller: phoneNumberController,
              decoration: InputDecoration(
                labelText: 'Número de teléfono',
                border: OutlineInputBorder(),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(color: Color.fromRGBO(22, 45, 222, 1)), // Cambio: Agregado el color azul al borde enfocado
                ),
                errorText: _phoneNumberError,
              ),
              keyboardType: TextInputType.phone,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                _registerUser(context);
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Color.fromRGBO(22, 45, 222, 1), // Define el color de fondo directamente aquí
                padding: EdgeInsets.symmetric(vertical: 16.0),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8.0),
                ),
              ),
              child: Text(
                'Registrarse',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 16.0,
                ),
              ),
            ),
            SizedBox(height: 20),
            TextButton( // Cambio: Se agrega el TextButton al final del formulario
              onPressed: () {
                Navigator.push(
                  context,
                  PageRouteBuilder(
                    pageBuilder: (context, animation, secondaryAnimation) => LoginPage(), // Cambio: Se cambia la clase a la que redirige
                    transitionsBuilder: (context, animation, secondaryAnimation, child) {
                      var begin = Offset(-1.0, 0.0); // Cambio: Se cambia el inicio de la transición a la izquierda (-1.0)
                      var end = Offset.zero;
                      var curve = Curves.easeInOut;
                      var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));
                      var offsetAnimation = animation.drive(tween);
                      return SlideTransition(
                        position: offsetAnimation,
                        child: child,
                      );
                    },
                  ),
                );
              },
              child: Text(
                '¿Ya tienes una cuenta? Inicia sesión',
                style: TextStyle(
                  fontSize: 14.0,
                  color: Color.fromRGBO(22, 45, 222, 1),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

